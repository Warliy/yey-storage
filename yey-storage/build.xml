<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="Syncany" default="release" basedir=".">
    <description>Builds, tests, and runs Syncany.</description>
    <property file="version.properties"/>
    <import file="nbproject/build-impl.xml"/>

	<!-- Determine OS -->
	<condition property="isLinux"><os family="unix" /></condition>
	<condition property="isWindows"><os family="windows" /></condition>
	<condition property="isMac"><os family="mac" /></condition>
	
	<!-- Architecture; http://lopica.sourceforge.net/os.html -->
	<condition property="arch" value="amd64">
		<or>
			<os arch="x86_64" />
			<os arch="amd64" />
		</or>
	</condition>
	
	<condition property="arch" value="i386">
		<or>
			<os arch="x86" />
			<os arch="i386" />
			<os arch="i686" />			
		</or>
	</condition>	
   
   <target name="release" depends="linux,windows">
       
   </target>
   
	<!-- Linux only stuff -->
	<target name="linux" depends="-release-common" if="isLinux">        
		<echo level="info" message="Linux only: Adjust file permissions ..." />
		<exec executable="chmod" output="/dev/null" os="Linux">
			<arg value="+x"/>
			<arg value="${dist.dir}/bin/syncany.sh"/>
            <arg value="${dist.dir}/bin/native.py"/>
		</exec>
		        
        <echo level="info" message="Linux only: creating tar.gz archive ..." />
        <move file="${dist.dir}" tofile="syncany-${VERSION_MAJOR}.${VERSION_MINOR}" />
        
		<exec executable="tar" output="/dev/null">
			<arg value="-czf"/>
            <arg value="syncany-${VERSION_MAJOR}.${VERSION_MINOR}.tar.gz"/>
			<arg value="syncany-${VERSION_MAJOR}.${VERSION_MINOR}"/>
		</exec>
        
        <move file="syncany-${VERSION_MAJOR}.${VERSION_MINOR}" tofile="${dist.dir}" />
        
        <move file="syncany-${VERSION_MAJOR}.${VERSION_MINOR}.tar.gz" todir="${dist.dir}" />
	</target>

	<!-- Windows only stuff -->
	<target name="windows" depends="-release-common" if="isWindows">
		<echo level="info" message="Doing Windows only stuff ..." />
	</target>
    
    <!-- javac -cp ../syncany/build/classes:shared/jets3t-0.8.1.jar $(find -name '*.java') -->
    <target name="plugin-rest" depends="compile">
    	<mkdir dir="${dist.dir}/plugins" />
		<mkdir dir="${dist.dir}/plugins/rest" />
		<mkdir dir="${dist.dir}/plugins/rest/lib" />		
		
        <jar destfile="${dist.dir}/plugins/rest/plugin-rest.jar">                 
            <fileset dir="${build.classes.dir}" includes="org/syncany/connection/plugins/rest/**" />
            <fileset dir="${build.classes.dir}" includes="org/syncany/connection/plugins/s3/**" />
            <fileset dir="${build.classes.dir}" includes="org/syncany/connection/plugins/gs/**" />                        
            <!-- TODO PLUGIN README FILES -->
        </jar>
        
        <copy file="lib/plugins/shared/jets3t-0.8.1.jar" todir="${dist.dir}/plugins/rest/lib" />
        
		<zip destfile="${dist.dir}/plugins/plugin-rest.zip" basedir="${dist.dir}/plugins/rest" />
    </target>

    <!-- javac -cp ../syncany/build/classes:shared/jets3t-0.8.1.jar $(find -name '*.java') -->
    <target name="plugin-ftp" depends="compile">
        <jar destfile="${dist.dir}/plugin-ftp.jar">                 
            <fileset dir="${build.classes.dir}" includes="org/syncany/connection/plugins/ftp/**" />
            <fileset dir="lib/plugins/ftp" includes="**" />
        </jar>
    
        <!--<jar destfile="${dist.dir}/plugin-ftp.jar" basedir="${build.classes.dir}"
             includes="org/syncany/connection/plugins/ftp/**">                 
        </jar>-->
            <!--<zipfileset includes="**/*.class" src="lib/main/some.jar"/>                 -->
    </target>
    
	<!-- Post JAR Hook -->
    <target name="-release-common" depends="clean,jar">
		<echo level="info" message="Copying required files ..." />
		<copy todir="${dist.dir}">
			<fileset dir=".">
				<include name="bin/**" />
				<include name="conf/**" />
				<include name="res/**" />

				<!-- Only core libraries; no subdirectories -->
				<include name="lib/*" />	
				
				<include name="README" />
				<include name="LICENSE" />				
                <include name="INSTALL" />
                <include name="DEVELOPMENT" />
			</fileset>
		</copy>
			
		<echo level="info" message="Copying plugin files ..." />
		<copy todir="${dist.dir}/lib/plugins">
			<fileset dir=".">
				<include name="lib/plugins/**" />				
			</fileset>
		</copy>

		<echo level="info" message="Deleting unnecessary README.txt ..." />
		<delete file="${dist.dir}/README.TXT" />
		
		<echo level="info" message="Moving JAR ..." />
		<move file="${dist.dir}/Syncany.jar" tofile="${dist.dir}/lib/syncany.jar"/>	
    </target>    

	<target name="-copy-libs">
		<copy todir="${dist.dir}/lib">
            <fileset dir="lib">            
                <include name="AbsoluteLayout.jar" />
                <include name="AppFramework-1.03.jar" />
                <include name="commons-cli-1.2.jar" />
                <include name="commons-codec-1.4.jar" />
                <include name="commons-collections3-3.2.1.jar" />
                <include name="commons-httpclient-3.1.jar" />
                <include name="commons-lang-2.4.jar" />
                <include name="commons-logging-1.1.1.jar" />
                <include name="commons-net2-2.0.jar" />                
                <include name="commons-vfs-1.0.jar" />                              
                <include name="derby-10.8.1.2.jar" />                 
                <include name="dom4j-1.6.1.jar" />
                <include name="eclipselink-2.2.0.jar" />
                <include name="eclipselink-javax.persistence-2.0.jar" />
                <include name="httpclient-4.0.3.jar" />
                <include name="httpcore-4.1.jar" />
                <include name="javamail-mail.jar" /> <!-- only by IMAP? -->
                <include name="java-xmlbuilder-0.4-SNAPSHOT.jar" /> <!-- where is this needed? -->
                <!-- java-gnome from the repos, because of the JNI stuff -->
                <include name="jets3t-0.8.1.jar" /> <!-- only by S3 & gs plugins -->
                <include name="jpathwatch-0-94-libs-only.jar" />
                <include name="log4j-1.2.jar" />
                <include name="mx4j-3.0.2.jar" /> <!-- where is this needed? -->
                <include name="mysql-connector-java-5.1.13-bin.jar" /> <!-- temporarily -->
                <include name="ostermillerutils_1_07_00.jar" />
                <include name="rabin-hash-function-2.0.jar" /> <!-- TTTD Chunking -->                
				<include name="swing-worker-1.1.jar" />
				<include name="swing-layout-1.0.4.jar" />                
            </fileset>			
		</copy>
	</target>	
    
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Syncany-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
</project>
